---
description: These rules will give the AI the necessary context on the project's purpose, architecture, and technology stack, ensuring it provides more accurate and relevant assistance
globs: 
alwaysApply: false
---
# MentorIA Project Context & Rules

## 1. Project Goal & Purpose
- [cite_start]**What is MentorIA?** MentorIA is a mobile-first, AI-powered study companion for Spanish-speaking students in Latin America. [cite_start]It acts as a personal tutor that ingests a user's study materials (photos, PDFs, YouTube links) and generates answers, flashcards, and quizzes.
- [cite_start]**Who it serves:** The primary audience is secondary students (16-18) and adult learners (18-35). [cite_start]The app is designed to be mobile-first, running well on low-end Android devices and integrating with WhatsApp.
- [cite_start]**Core Value:** The app bridges the "after-class help" gap by providing personalized, on-demand study assistance based on the user's own content. [cite_start]It emphasizes a Latin-American Spanish voice and cultural context.

## 2. Core User Flow & Architecture
- **Monorepo Structure:** This is a monorepo with two main packages: `packages/frontend` (a React PWA) and `packages/backend` (a Python FastAPI server). Always respect this separation.
- **The "Mentor" Concept:** The central organizing principle is the "Mentor." [cite_start]A user can create multiple Mentors (e.g., one for "History," one for "Biology").
- **User Journey:**
    1.  [cite_start]**Onboarding:** The user creates their first Mentor.
    2.  **Mentor Hub:** This is the main landing page (`MentorHub.jsx`). [cite_start]It displays a list or grid of all created Mentors.
    3.  **Mentor Dashboard:** Clicking a Mentor leads to its dedicated dashboard (`MentorDashboard.jsx`). [cite_start]This is where the user interacts with that Mentor's specific "Resource Vault," chat, quizzes, and flashcards. [cite_start]Data is always segregated by `mentor_id`.

## 3. Frontend Rules (`packages/frontend`)
- [cite_start]**Tech Stack:** React, Vite, Tailwind CSS, and a PWA setup using Workbox. [cite_start]We use Capacitor for native store wrappers.
- **State Management:** Use a global state manager (like Redux Toolkit) for `auth`, `mentors`, and global `ui` state.
- **File Structure:** Adhere strictly to the established structure:
    - **`pages/`**: Only for top-level screens that represent a full view (e.g., `MentorHub.jsx`, `MentorDashboard.jsx`).
    - **`components/`**: For all reusable React components.
        - `common/`: Simple, generic components (Button, Modal, Card).
        - `layout/`: Structural components (Header, BottomNavBar).
        - `mentors/` & `resources/`: Feature-specific components (`MentorCard`, `ResourceList`).
    - **`services/`**: All API communication logic goes here. Never make direct API calls from within a component.
    - **`hooks/`**: For reusable component logic (e.g., `useAuth`).

## 4. Backend Rules (`packages/backend`)
- [cite_start]**Tech Stack:** Python 3.12 with FastAPI & Uvicorn. [cite_start]Hosted on Fly.io via Docker.
- **Database & AI:**
    - [cite_start]**Database:** Supabase (Postgres 16) with Row-Level Security (RLS).
    - [cite_start]**Vector Search:** `pgvector` extension within Supabase is used for vector search. Do not use a separate vector DB for the MVP.
    - [cite_start]**LLMs:** We use a tiered router for models: GPT-4o for complex questions, and Mixtral-8x22B (on Groq) for simpler tasks like flashcards.
    - [cite_start]**RAG:** We are using a simple, "hand-rolled RAG helper" (~200 LOC) for performance. DO NOT use or suggest LangChain.
- **File Structure:** Adhere strictly to the established structure:
    - **`app/api/`**: Contains all FastAPI routers/endpoints.
    - **`app/services/`**: For all complex business logic. The RAG logic (`rag_service.py`) and LLM interactions (`ai_models.py`) live here.
    - **`app/crud/`**: For simple Create, Read, Update, Delete database functions.
    - **`app/schemas/`**: Pydantic schemas for data validation and serialization.
    - [cite_start]**`workers/tasks.py`**: This is where all Celery background jobs are defined (e.g., OCR processing, embedding generation). Heavy processing must be done in a background worker, not on the main request thread.

## 5. General Coding & Interaction Style
- **Clarity and Simplicity:** Prioritize clean, readable code. The goal is a lean and maintainable codebase for a solo developer.
- **Follow the Blueprint:** When asked to add a feature, first identify where it fits within the existing architecture. For a new UI element, determine if it's a `common` component or feature-specific. For backend logic, decide if it's `crud`, a `service`, or a `worker task`.

- **Assume Context:** You have access to all files. When I ask a question, use the context of the entire project to provide the most relevant answer.